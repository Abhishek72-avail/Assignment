# Main nginx configuration
events {
    worker_connections 1024;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format with timestamp and path
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'upstream: $upstream_addr '
                       'response_time: $upstream_response_time';

    # Access and error logs
    access_log /var/log/nginx/access.log detailed;
    error_log /var/log/nginx/error.log warn;

    # Upstream definitions
    upstream service1_backend {
        server service1:8001;
    }

    upstream service2_backend {
        server service2:8002;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Health check endpoint for nginx itself
        location /nginx-health {
            access_log off;
            return 200 "nginx is healthy\n";
            add_header Content-Type text/plain;
        }

        # Route /service1 to Go application
        location /service1/ {
            # Remove /service1 prefix before forwarding
            rewrite ^/service1/(.*) /$1 break;
            
            proxy_pass http://service1_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Route /service1 (without trailing slash)
        location /service1 {
            return 301 /service1/;
        }

        # Route /service2 to Python application
        location /service2/ {
            # Remove /service2 prefix before forwarding
            rewrite ^/service2/(.*) /$1 break;
            
            proxy_pass http://service2_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Route /service2 (without trailing slash)
        location /service2 {
            return 301 /service2/;
        }

        # Default route - show available services
        location / {
            return 200 '<!DOCTYPE html>
<html>
<head><title>Nginx Reverse Proxy</title></head>
<body>
    <h1>Welcome to Nginx Reverse Proxy</h1>
    <p>Available services:</p>
    <ul>
        <li><a href="/service1/">Service 1 (Go Application)</a></li>
        <li><a href="/service2/">Service 2 (Python Application)</a></li>
        <li><a href="/nginx-health">Nginx Health Check</a></li>
    </ul>
</body>
</html>';
            add_header Content-Type text/html;
        }

        # Error pages
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}